/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Depository.Custodian;

import Business.Enterprise.DepositoryEnterprise;
import Business.Other.Bitcoin;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WritingToCustodianWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KW
 */
public class CustodianProcessBitcoinJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessBitcoinJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    DepositoryEnterprise depositoryEnterprise;
    WritingToCustodianWorkRequest writingToCustodianWorkRequest;

    CustodianProcessBitcoinJPanel(JPanel userProcessContainer, UserAccount account, DepositoryEnterprise depositoryEnterprise, WritingToCustodianWorkRequest wtcwr) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.depositoryEnterprise = depositoryEnterprise;
        this.writingToCustodianWorkRequest = wtcwr;
        populateTable();
        
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblBitcoinList.getModel();
        model.setRowCount(0);
        for (Bitcoin b : writingToCustodianWorkRequest.getBitcoins()) {
            Object[] row = new Object[3];
            row[0] = b;
            row[1] = b.getPrivateKey();
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = formatter.format(b.getBirthday());
            row[2] = dateString;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBitcoinList = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnWrite = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText("New Mined Bitcoin List");

        tblBitcoinList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Private Key", "Mined Date"
            }
        ));
        jScrollPane1.setViewportView(tblBitcoinList);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnWrite.setText("Write");
        btnWrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(375, 375, 375))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnWrite)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(110, 110, 110))))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(btnBack)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel4)
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btnWrite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(37, 37, 37))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustodianVerificationRequestJPanel cvrjp = (CustodianVerificationRequestJPanel) component;
        cvrjp.populateTable();        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnWriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWriteActionPerformed
        // TODO add your handling code here:
        if (writingToCustodianWorkRequest.getStatusString().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "This work request was complete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }     
        
        writingToCustodianWorkRequest.setReceiver(account);
        writingToCustodianWorkRequest.setResolveDate(new Date());
        writingToCustodianWorkRequest.setStatusString("Completed");
        
        account.getWorkQueue().getWorkRequestList().add(writingToCustodianWorkRequest);
        
        for(Bitcoin b : writingToCustodianWorkRequest.getBitcoins()){
            b.setBirthday(new Date());
            depositoryEnterprise.getBitcoinList().replace(b, true);
        }
        
        DefaultTableModel model = (DefaultTableModel) tblBitcoinList.getModel();
        model.setRowCount(0);
        
        JOptionPane.showMessageDialog(null, "Wrote Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnWriteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnWrite;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBitcoinList;
    // End of variables declaration//GEN-END:variables
}
