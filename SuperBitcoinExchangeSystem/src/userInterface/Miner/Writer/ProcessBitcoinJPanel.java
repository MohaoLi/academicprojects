/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Miner.Writer;

import Business.EcoSystem;
import Business.Enterprise.DepositoryEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Depository.AuthenticationOrganization;
import Business.Organization.Organization;
import Business.Other.Bitcoin;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BitcoinMiningToWritingWorkRequest;
import Business.WorkQueue.WritingToCustodianWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KW
 */
public class ProcessBitcoinJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessBitcoinJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    BitcoinMiningToWritingWorkRequest bmtwwr;
    DepositoryEnterprise depositoryEnterprise = null;
    AuthenticationOrganization authenticationOrganization = null;

    public ProcessBitcoinJPanel(JPanel userProcessContainer, UserAccount account, BitcoinMiningToWritingWorkRequest bmtwwr, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.bmtwwr = bmtwwr;

        for (Network n : ecoSystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof DepositoryEnterprise) {
                    this.depositoryEnterprise = (DepositoryEnterprise) e;
                    break;
                }
            }
        }
        
        if(depositoryEnterprise != null){
            for(Organization o : depositoryEnterprise.getOrganizationDirectory().getOrganizationList()){
                if(o instanceof AuthenticationOrganization){
                    this.authenticationOrganization = (AuthenticationOrganization) o;
                    break;
                }
            }
        }

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblBitcoinList.getModel();
        model.setRowCount(0);
        for (Bitcoin b : bmtwwr.getBitcoins()) {
            Object[] row = new Object[3];
            row[0] = b;
            row[1] = b.getPrivateKey();
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = formatter.format(b.getBirthday());
            row[2] = dateString;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBitcoinList = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText("Bitcoin List");

        tblBitcoinList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Private Key", "Mined Date"
            }
        ));
        jScrollPane1.setViewportView(tblBitcoinList);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnBack))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSubmit)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(128, 128, 128)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(52, 137, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(427, 427, 427))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addGap(74, 74, 74)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(40, 40, 40))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        WriterWorkAreaJPanel wwajp = (WriterWorkAreaJPanel) component;
        wwajp.populateTable();        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        ArrayList<Bitcoin> bitcoinList = bmtwwr.getBitcoins();
        if (bmtwwr.getStatusString().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "This work request was complete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (bitcoinList.size() <= 0) {
            JOptionPane.showMessageDialog(null, "No Bitcoin News need to be submitted.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (depositoryEnterprise == null) {
            JOptionPane.showMessageDialog(null, "No Depository Enterprises is not existent yet.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        
        bmtwwr.setReceiver(account);
        bmtwwr.setResolveDate(new Date());
        bmtwwr.setStatusString("Completed");
        
        WritingToCustodianWorkRequest request = new WritingToCustodianWorkRequest();
        String message = "Report Mined Bitcoin";
        request.setMessage(message);
        request.setSender(account);
        request.setStatusString("Sent");
        request.setBitcoins(bitcoinList);
        
        authenticationOrganization.getWorkQueue().getWorkRequestList().add(request);
        account.getWorkQueue().getWorkRequestList().add(request);
        
        JOptionPane.showMessageDialog(null, "Submitted Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBitcoinList;
    // End of variables declaration//GEN-END:variables
}
