/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Platform.Broker;

import Business.EcoSystem;
import Business.Employee.Person;
import Business.Enterprise.Enterprise;
import Business.Organization.BitcoinPlatform.BitcoinMatcherOrganization;
import Business.Organization.Organization;
import Business.Other.Bitcoin;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BrokerBuyWorkRequest;
import Business.WorkQueue.BrokerSellWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lei
 */
public class TransactionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TransactionJPanel
     */
    JPanel container;
    Person customer;
    UserAccount account;
    Enterprise platformenterprise;
    EcoSystem ecoSystem;

    public TransactionJPanel(JPanel container, Person customer, UserAccount account, Enterprise platformenterprise, EcoSystem ecoSystem) {
        initComponents();
        this.container = container;
        this.customer = customer;
        this.account = account;
        this.platformenterprise = platformenterprise;
        this.ecoSystem = ecoSystem;
        populatebuy();
        populatetransaction();
        sellJTabbed.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                JTabbedPane tabbedPane = (JTabbedPane) e.getSource();
                int selectedIndex = tabbedPane.getSelectedIndex();
                switch (selectedIndex) {
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        populateAllTransaction();
                }

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populatetransaction() {
        marketingpriceJTextField.setText(String.valueOf(ecoSystem.getBitcoinPrice()));
        availbitcoinJTextField.setText(String.valueOf(customer.getWallet().getBitcoinList().size()));
        availmoneyJTextField.setText(String.valueOf(customer.getWallet().getFlat()));

    }

    public void populatebuy() {
        maxBidingJTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                warn();
            }

            public void removeUpdate(DocumentEvent e) {
                warn();
            }

            public void insertUpdate(DocumentEvent e) {
                warn();
            }

            public void warn() {
                Integer bidingprice = 0;
                try {
                    bidingprice = Integer.parseInt(maxBidingJTextField.getText());
                } catch (Exception e) {

                }
                if (bidingprice > 0) {
                    int totalprice = Integer.parseInt((String) buyJComboBox.getSelectedItem()) * bidingprice;
                    totalpriceTextField.setText(String.valueOf(totalprice));

                }
            }
        });

    }

    public void populateAllTransaction() {
        DefaultTableModel sellmodel = (DefaultTableModel) sellRequestJTable.getModel();
        sellmodel.setRowCount(0);
        for (Organization organization : platformenterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof BitcoinMatcherOrganization) {
                for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    if (request instanceof BrokerSellWorkRequest) {
                        Object[] row = new Object[5];
                        row[0] = request.getMessage();
                        row[1] = ((BrokerSellWorkRequest) request).getQuantity();
                        row[2] = ((BrokerSellWorkRequest) request).getPrice();
                        row[3] = request.getStatusString();
                        row[4] = ((BrokerSellWorkRequest) request).getBitcoinlist().size();
                        sellmodel.addRow(row);
                    }
                }
            }
        }

        DefaultTableModel buymodel = (DefaultTableModel) buyerRequestJTable.getModel();
        buymodel.setRowCount(0);
        for (Organization organization : platformenterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof BitcoinMatcherOrganization) {
                for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    if (request instanceof BrokerBuyWorkRequest) {
                        Object[] row = new Object[5];
                        row[0] = request.getMessage();
                        row[1] = ((BrokerBuyWorkRequest) request).getQuantity();
                        row[2] = ((BrokerBuyWorkRequest) request).getPrice();
                        row[3] = request.getStatusString();
                        row[4] = ((BrokerBuyWorkRequest) request).getBuy_quantity();
                        buymodel.addRow(row);
                    }
                }
            }
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        sellJTabbed = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        maxBidingJTextField = new javax.swing.JTextField();
        buyJButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        totalpriceTextField = new javax.swing.JTextField();
        buyJComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        miniSellingPriceJTextField = new javax.swing.JTextField();
        sellJButton = new javax.swing.JButton();
        sellJComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sellRequestJTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        buyerRequestJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        marketingpriceJTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        availbitcoinJTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        availmoneyJTextField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 102, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Transaction");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Buying Quantity");

        jLabel4.setText("Max Biding Price");

        buyJButton.setText("Submit");
        buyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyJButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Total Price");

        totalpriceTextField.setEditable(false);
        totalpriceTextField.setEnabled(false);

        buyJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        buyJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(333, 333, 333)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buyJButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel7))
                            .addGap(92, 92, 92)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(maxBidingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(totalpriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(97, 97, 97)
                            .addComponent(buyJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxBidingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalpriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(54, 54, 54)
                .addComponent(buyJButton)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        sellJTabbed.addTab("Buy", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setText("Selling Quantity");

        jLabel6.setText("Minimum Selling Price");

        sellJButton.setText("Submit");
        sellJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellJButtonActionPerformed(evt);
            }
        });

        sellJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        sellJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sellJButton)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(miniSellingPriceJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(sellJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(286, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(sellJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniSellingPriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(63, 63, 63)
                .addComponent(sellJButton)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        sellJTabbed.addTab("Sell", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        sellRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Messsage", "Quantity", "Max Biding Price", "Statu", "To be sold"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sellRequestJTable);

        buyerRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Quantity", "Min Selling Price", "Statu", "To be bought"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(buyerRequestJTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        sellJTabbed.addTab("All Transaction Request", jPanel3);

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Marketing Price");

        marketingpriceJTextField.setEditable(false);
        marketingpriceJTextField.setEnabled(false);

        jLabel8.setText("Available Bitcoin");

        availbitcoinJTextField.setEditable(false);
        availbitcoinJTextField.setEnabled(false);

        jLabel9.setText("Available Money");

        availmoneyJTextField.setEditable(false);
        availmoneyJTextField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sellJTabbed, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(backJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(availmoneyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(marketingpriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(availbitcoinJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(198, 198, 198))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(425, 425, 425))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(availbitcoinJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(availmoneyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(marketingpriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, 9)
                .addComponent(sellJTabbed, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buyJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyJComboBoxActionPerformed
        // TODO add your handling code here:
        int quantity = Integer.parseInt((String) buyJComboBox.getSelectedItem());
        Integer bidingprice = 0;
        try {
            bidingprice = Integer.parseInt(maxBidingJTextField.getText());
        } catch (Exception e) {

        }
        int totalprice = quantity * bidingprice;
        if (totalprice == 0) {
            totalpriceTextField.setText("");
        } else {
            totalpriceTextField.setText(String.valueOf(totalprice));
        }
    }//GEN-LAST:event_buyJComboBoxActionPerformed

    public static boolean isNumeric(String str) {
        for (int i = 0; i < str.length(); i++) {
            //System.out.println(str.charAt(i));
            if (!Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    private void buyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyJButtonActionPerformed
        // TODO add your handling code here:
        if(!isNumeric(maxBidingJTextField.getText())){
            JOptionPane.showMessageDialog(null, "Please enter a digit number.");
            return;
        }
        if (totalpriceTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "You should select the quantity or input biding price");
        } else if (Integer.parseInt(totalpriceTextField.getText()) > Double.parseDouble(availmoneyJTextField.getText())) {
            JOptionPane.showMessageDialog(null, "Your Available Money is not enough");
        } else {
            BrokerBuyWorkRequest request = new BrokerBuyWorkRequest();
            request.setMessage("Buy Bitcoin");
            request.setPrice(Integer.parseInt(maxBidingJTextField.getText()));
            request.setQuantity(Integer.parseInt((String) buyJComboBox.getSelectedItem()));
            request.setBuy_quantity(Integer.parseInt((String) buyJComboBox.getSelectedItem()));
            request.setSender(account);
            request.setStatusString("Pending");
            request.setCustomer_buy(customer);
            Organization org = null;
            for (Organization organization : platformenterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof BitcoinMatcherOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "Successfully Submitted");
        }


    }//GEN-LAST:event_buyJButtonActionPerformed

    private void sellJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellJComboBoxActionPerformed
        // TODO add your handling code here:
        int max = Integer.parseInt(availbitcoinJTextField.getText());
        int sellnum = Integer.parseInt((String) sellJComboBox.getSelectedItem());
        if (sellnum > max) {
            JOptionPane.showMessageDialog(null, "Your Bitcoins are not enough");
        }
    }//GEN-LAST:event_sellJComboBoxActionPerformed

    private void sellJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellJButtonActionPerformed
        // TODO add your handling code here:
        if(!isNumeric(miniSellingPriceJTextField.getText())){
            JOptionPane.showMessageDialog(null, "Please enter a digit number.");
            return;
        }
        if (miniSellingPriceJTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "You should select the quantity or input biding price");
        } else {
            BrokerSellWorkRequest request = new BrokerSellWorkRequest();
            request.setMessage("Sell Bitcoin");
            request.setCustomer_sell(customer);
            request.setPrice(Integer.parseInt(miniSellingPriceJTextField.getText()));
            int quantity = Integer.parseInt((String) sellJComboBox.getSelectedItem());
            if (quantity <= customer.getWallet().getBitcoinList().size()) {
                for (int i = 0; i < quantity; i++) {
                    Bitcoin bit = customer.getWallet().getBitcoinList().get(i);
                    request.getBitcoinlist().add(bit);
                    request.setQuantity(quantity);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You have no enough Bitcoins");
                return;
            }
            for (Bitcoin bit : request.getBitcoinlist()) {
                customer.getWallet().getBitcoinList().remove(bit);
            }
            request.setSender(account);
            request.setStatusString("Pending");
            Organization org = null;
            for (Organization organization : platformenterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof BitcoinMatcherOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Successfully Submitted");
                populatetransaction();
                miniSellingPriceJTextField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "There is no BitcoinMatcherOrganization");
            }

        }


    }//GEN-LAST:event_sellJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availbitcoinJTextField;
    private javax.swing.JTextField availmoneyJTextField;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton buyJButton;
    private javax.swing.JComboBox<String> buyJComboBox;
    private javax.swing.JTable buyerRequestJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField marketingpriceJTextField;
    private javax.swing.JTextField maxBidingJTextField;
    private javax.swing.JTextField miniSellingPriceJTextField;
    private javax.swing.JButton sellJButton;
    private javax.swing.JComboBox<String> sellJComboBox;
    private javax.swing.JTabbedPane sellJTabbed;
    private javax.swing.JTable sellRequestJTable;
    private javax.swing.JTextField totalpriceTextField;
    // End of variables declaration//GEN-END:variables
}
